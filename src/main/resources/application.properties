#spring.datasource.url=jdbc:postgresql://localhost/testdb
#spring.datasource.url=jdbc:postgresql://104.198.244.0:5432/adsoft-imc

#CONEXIONES
#class server
#spring.datasource.url=jdbc:postgresql://35.232.232.192:5432/jcortes-tokens
#personal server
spring.datasource.url=jdbc:postgresql://34.134.111.121:5432/jcortes-tokens

#localhost
#spring.datasource.url=jdbc:postgresql://localhost:5432/jcortes-tokens

#personal / local creds
spring.datasource.username=postgres
spring.datasource.password=postgres

#class creds
#spring.datasource.username=postgres
#spring.datasource.password=adsoft

#spring.datasource.username=postgres
#spring.datasource.password=adsoft
spring.jpa.generate-ddl=true
#spring.jpa.hibernate.ddl-auto = update

# App Properties #
#frase semilla con la que generara los tokens, puede ser la que sea
grokonez.app.jwtSecret=i-love-adsoftsito 
#En cuantos segundo expirara el token
grokonez.app.jwtExpiration=86400

#por seguridad poner el token en alguna variable de ambiente en un deploy real

###
    #spring.datasource.username & spring.datasource.password properties are the same as your database installation.
    #Spring Boot uses Hibernate for JPA implementation, we configure MySQL5InnoDBDialect for MySQL
    #spring.jpa.hibernate.ddl-auto is used for database initialization. We set the value to update value so that a table will 
    #be created in the database automatically corresponding to defined data model. 
    #Any change to the model will also trigger an update to the table. For production, this property should be validate.
###